<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客一键部署及源代码上传github脚本</title>
    <url>/HexoScript/</url>
    <content><![CDATA[<h6 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h6><p>搭建完博客后发现进行文章编写需要执行繁琐的hexo clean hexo g hexo d等命令，且我的博客还安装了Service Worker 服务，每一次静态页面的修改都需要对相应缓存版本号进行修改。所以利用golang语言编写了相应的小脚本。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 文件读取（插入内容）</li>
<li><input checked="" disabled="" type="checkbox"> 利用os/exec包对cmd的使用</li>
<li><input checked="" disabled="" type="checkbox"> 字符分割等</li>
</ul>
<h6 id="代码部分："><a href="#代码部分：" class="headerlink" title="代码部分："></a>代码部分：</h6><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//EditJs对sw.js文件内缓存版本号进行修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EditJs</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;D:\\BLOG\\blog\\source\\sw.js&quot;</span>)</span><br><span class="line">    CheackErr(err)</span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    content, err1 := ioutil.ReadAll(file) <span class="comment">//ioutil.ReadAll读取文件</span></span><br><span class="line">    CheackErr(err1)</span><br><span class="line">    strcontent := <span class="keyword">string</span>(content)</span><br><span class="line">    list := strings.SplitN(strcontent,<span class="string">&quot;&#x27;&quot;</span>,<span class="number">3</span>) </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符串分割目的是把&#x27;-999991&#x27;分割出来根据符号`将整个文件分割为字符串切片。</span></span><br><span class="line"><span class="comment">          sw.js文件部分代码。</span></span><br><span class="line"><span class="comment">const cacheSuffixVersion = &#x27;-999991&#x27;,</span></span><br><span class="line"><span class="comment">    maxEntries = 100;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">importScripts(&#x27;https://cdn.... </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//字符串转换为数字，-999991，每次执行加一，即更改缓存版本号。</span></span><br><span class="line">    num, _ := strconv.Atoi(list[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">100</span> &#123;</span><br><span class="line">        num = num + <span class="number">1</span></span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        <span class="comment">//以下代码为字符串拼接形成新字符串覆盖原sw.js文件达到数据插入功能</span></span><br><span class="line">        tempFile, err := os.OpenFile(<span class="string">&quot;D:\\BLOG\\blog\\source\\sw.tmp&quot;</span>, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;Temp create failed! err: %v\n&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        writer := bufio.NewWriter(tempFile)</span><br><span class="line">        _ = writer.Flush()</span><br><span class="line">        _, _ = writer.WriteString(list[<span class="number">0</span>])</span><br><span class="line">        _ = writer.Flush()</span><br><span class="line">        _, _ = writer.WriteString(<span class="string">&quot;&#x27;&quot;</span>+strconv.Itoa(num)+<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">        _ = writer.Flush()</span><br><span class="line">        _, _ = writer.WriteString(list[<span class="number">2</span>])</span><br><span class="line">        _ = writer.Flush()</span><br><span class="line">        file.Close()</span><br><span class="line">        tempFile.Close()</span><br><span class="line">        err = os.Rename(<span class="string">&quot;D:\\BLOG\\blog\\source\\sw.tmp&quot;</span>, <span class="string">&quot;D:\\BLOG\\blog\\source\\sw.js&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;缓存版本号超出最大值&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sw.js缓存版本号修改完成。&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deliverPublic</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    <span class="keyword">var</span> out []<span class="keyword">byte</span></span><br><span class="line">    err = os.Chdir(<span class="string">&quot;d:/BLOG/blog&quot;</span>) <span class="comment">//切换工作目录</span></span><br><span class="line">    CheackErr(err)</span><br><span class="line"></span><br><span class="line">    out, err = exec.Command(<span class="string">&quot;npm&quot;</span>,<span class="string">&quot;run&quot;</span>, <span class="string">&quot;sendout&quot;</span>).Output()</span><br><span class="line">    CheackErr(err)</span><br><span class="line">    fmt.Printf(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deliverSource</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> err error</span><br><span class="line">    <span class="keyword">var</span> out []<span class="keyword">byte</span></span><br><span class="line">    err = os.Chdir(<span class="string">&quot;d:/BLOG/blog&quot;</span>)</span><br><span class="line">    CheackErr(err)</span><br><span class="line"></span><br><span class="line">    out, err = exec.Command(<span class="string">&quot;git&quot;</span>,<span class="string">&quot;add&quot;</span>, <span class="string">&quot;.&quot;</span>).Output()</span><br><span class="line">    CheackErr(err)</span><br><span class="line">    fmt.Printf(<span class="keyword">string</span>(out))</span><br><span class="line">	</span><br><span class="line">    timeStr:=time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line">    out, err = exec.Command(<span class="string">&quot;git&quot;</span>,<span class="string">&quot;commit&quot;</span>, <span class="string">&quot;-m&quot;</span>, timeStr).Output()</span><br><span class="line">    CheackErr(err)</span><br><span class="line">    fmt.Printf(<span class="keyword">string</span>(out))</span><br><span class="line"></span><br><span class="line">    out, err = exec.Command(<span class="string">&quot;git&quot;</span>,<span class="string">&quot;push&quot;</span>).Output()</span><br><span class="line">    CheackErr(err)</span><br><span class="line">    fmt.Printf(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入-宽字节</title>
    <url>/SQL%E6%B3%A8%E5%85%A5%E2%80%94%E5%AE%BD%E5%AD%97%E8%8A%82/</url>
    <content><![CDATA[<p>搭建本地环境sqli-labs做的宽字节sql注入测试。</p>
<p>[TOC]</p>
<h4 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h4><p>在说注入原理前，首先得认识PHP中的**addslashes()**函数：</p>
<img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/addslashes()%E5%87%BD%E6%95%B0.png" style="zoom: 80%;" />



<p>也就是说，当你输入单引号等字符时，addslashes函数会自动加上**\**对字符进行转义，这样就会使得普通字符型注入只添加单引号闭合无法生效；</p>
<p>那么，要找到注入点就要想办法从addslashes函数逃逸出来。才能实现引号的闭合。这里存在两种办法：</p>
<blockquote><ol>
<li>把addslashes()函数所添加的反斜杠再添加一个反斜杠，对反斜杠进行转义，即“\\”。</li>
<li>想办法让\消失。</li>
</ol>
<p>针对第二种方法，利用的是mysql的一个特性，mysql在使用GBK编码时会认为两个字符时一个汉字（前一个ascii码要大于128，才到汉字的范围）</p>
<p>​                    ’       -&gt;     \‘      -&gt;   %5c%27</p>
<p>​                %df     -&gt;  %df\‘  -&gt;   %df%5c%27  -&gt; </p>
</blockquote>

<p>加入单引号时，addslashes()函数会自动添加反斜杠对单引号进行转移，而mysql使用GBK编码时对字符进行编码\‘就变成了%5c%27，这个时候如果再在%5c%27前面加上一个字符如“%df”（ascii码大于128的字符即可），mysql在进行GBK编码时，会将两个字符%df%5c认为是一个汉字，这个时候单引号就可以逃逸出来进行单引号闭合。</p>
<h4 id="sqli-labs实例-Less-32"><a href="#sqli-labs实例-Less-32" class="headerlink" title="sqli-labs实例  Less-32"></a>sqli-labs实例  Less-32</h4><p>根据题目提示**Bypass addslashex()**以及页面提示即可知道该题为宽字节注入题目。</p>
<ul>
<li>首先我们针对第一种方法进行测试输入id=1看输出结果</li>
</ul>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/sql%E6%B3%A8%E5%85%A5.png" alt="image-20200707121348454"></p>
<p>输入反斜杠和单引号看输出结果</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/sql%E6%B3%A8%E5%85%A52.png" alt="image-20200707121643216"></p>
<p>从Hint可看到无论输入反斜杠还是单引号，后台最终都会对输入的反斜杠和单引号进行转义。所以此方法行不通。</p>
<ul>
<li>第二种方法测试，让反斜杠进行GBK编码时消失。</li>
</ul>
<p>输入:?id=%df 会发现返回了一个乱码（中文乱码）说明%df%5c结合成了一个汉字，反斜杠消失。</p>
<p>反斜杠消失后即可根据常规单引号闭合注入方法进行sql语句的注入。</p>
<h4 id="sql注入步骤"><a href="#sql注入步骤" class="headerlink" title="sql注入步骤"></a>sql注入步骤</h4><p>1.查列数，order by + 数字 进行测试</p>
<p>id=%df%27 order by 3 %23</p>
<p>2.查回显位置</p>
<p>?id=%df%27 union select 1,2,3 %23?</p>
<p>3.查库名</p>
<p>?id=%df%27 union select 1,database(),3 %23</p>
<p>4.查表名</p>
<p>?id=%df%27 union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3 %23</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/sqlzhuru.png" alt="image-20200707123721606"></p>
<p>5.查列名</p>
<p>?id=%df%27 union select 1,(select group_concat(column_name) from information_schema.columns where table_name=’xxxx’),3 %23</p>
<p>这里输入table_name=’users’时，addslashex()函数还会对单引号进行转义。可对users进行hex编码即转为16进制。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/sqlzhuru2.png" alt="image-20200707123956587"></p>
<p>得到列名表名即可得到数据库信息。</p>
<hr>
<p><strong>参考：安全课堂的视频内容。</strong></p>
<p><strong>以上内容均为个人理解，如有错误，请指正</strong></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>分析ajax爬取头条图片</title>
    <url>/spider/</url>
    <content><![CDATA[<p>–以今日头条为例通过分析 Ajax 抓取网页数据，并把数据分文件夹保存到本地。</p>
<span id="more"></span>

<h3 id="首先踩点"><a href="#首先踩点" class="headerlink" title="首先踩点"></a>首先踩点</h3><h4 id="分析内容"><a href="#分析内容" class="headerlink" title="- - -分析内容- - -"></a>- - -分析内容- - -</h4><p>搜索框输入‘街拍’，刷新后出现ajax请求，类型为XHR的即为ajax请求。点击preview分析内容，我们发现ajax请求的主要内容都在data标签里面，点开data，发现该标签里面分了很多小板块（0，1，2.等等），对比网页就可以得出这些小板块就是网页的一个模块，里面存放的东西就是我们要找的图片和标题。<br><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E8%B8%A9%E7%82%B92.png" alt="踩点2"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E8%B8%A9%E7%82%B94.png" alt="踩点3"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E8%B8%A9%E7%82%B95.png" alt="踩点4"></p>
<h5 id="分析请求头"><a href="#分析请求头" class="headerlink" title="- - -分析请求头- - -"></a>- - -分析请求头- - -</h5><p>在这个网页里面，每一次加载就是一个ajax请求。这时候分析两三个请求头就可以发现，每次发送ajax请求url变化的只是offset和timestamp，复制RequestURL打开发现timestamp不用输也能得出结果。所以变化的相当与只有offset，每次变化都是20，说明每次加载20个模块，也就是20组图片。所以在这里设置一个循环就可以采集到很多的目标数据。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E8%B8%A9%E7%82%B95-1.png" alt="踩点5"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E8%B8%A9%E7%82%B96.png" alt="踩点6"></p>
<h4 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h4><h5 id="获取网页内容"><a href="#获取网页内容" class="headerlink" title="- - -获取网页内容- - -"></a>- - -获取网页内容- - -</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import urllib.error</span><br><span class="line">import requests</span><br><span class="line">from urllib.parse import urlencode</span><br><span class="line"></span><br><span class="line">def get_page(Num_page):</span><br><span class="line">    <span class="comment"># 获取网页</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;aid&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;app_name&#x27;</span>: <span class="string">&#x27;web_search&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;offset&#x27;</span>: Num_page,</span><br><span class="line">        <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;keyword&#x27;</span>: <span class="string">&#x27;街拍&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;autoload&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;en_qc&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cur_tab&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;search_tab&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pd&#x27;</span>: <span class="string">&#x27;synthesis&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    url = ex_url + urlencode(params)</span><br><span class="line">    <span class="comment"># urlencode方法用法可百度就能看懂</span></span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="built_in">return</span> response.json()</span><br><span class="line">    except urllib.error.HTTPError as e:</span><br><span class="line">        <span class="built_in">print</span>(e.reason)</span><br><span class="line">    except urllib.error.URLError as e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t not connect url&quot;</span>)</span><br><span class="line">    <span class="comment"># 异常处理</span></span><br></pre></td></tr></table></figure>
<h4 id="解析保存数据"><a href="#解析保存数据" class="headerlink" title="- - -解析保存数据- - -"></a>- - -解析保存数据- - -</h4><p>这里我用一个函数一起写了读取和保存操作,读取和保存独立分开比较好.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">from pyquery import PyQuery as pq</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def get_img_url(json):</span><br><span class="line">    items = json.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    <span class="comment"># 调用get方法获取data标签内容</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> item.get(<span class="string">&#x27;emphasized&#x27;</span>) is not None:</span><br><span class="line">            file_text = pq(item.get(<span class="string">&#x27;emphasized&#x27;</span>).get(<span class="string">&#x27;title&#x27;</span>)).text()</span><br><span class="line">            <span class="comment"># 获取标题信息</span></span><br><span class="line">            file_list = re.findall(r<span class="string">&quot;[\u4E00-\u9FFF]&quot;</span>, file_text, re.S)</span><br><span class="line">            <span class="comment"># 正则匹配file_text中的汉字</span></span><br><span class="line">            file_name = <span class="string">&#x27;&#x27;</span>.join(file_list)</span><br><span class="line">            <span class="built_in">print</span>(file_name)</span><br><span class="line">            os.mkdir(file_name)</span><br><span class="line">            <span class="comment"># 创建以file_name为名的文件夹</span></span><br><span class="line">            lists = item.get(<span class="string">&#x27;image_list&#x27;</span>)</span><br><span class="line">            <span class="comment"># 一组获取图片地址</span></span><br><span class="line">            <span class="keyword">for</span> lis <span class="keyword">in</span> lists:</span><br><span class="line">                try:</span><br><span class="line">                    response = requests.get(lis[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">                    f_name = file_name + <span class="string">&#x27;/&#x27;</span> + lis[<span class="string">&#x27;url&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[-1] + <span class="string">&#x27;.jpg&#x27;</span></span><br><span class="line">                    with open(f_name, <span class="string">&#x27;wb&#x27;</span>) as f:</span><br><span class="line">                        f.write(response.content)</span><br><span class="line">                    <span class="comment"># 请求一组图片里各个图片.并保存.</span></span><br><span class="line">                except urllib.error.HTTPError as e:</span><br><span class="line">                    <span class="built_in">print</span>(e.reason)</span><br><span class="line">                except urllib.error.URLError as e:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t not connect url&quot;</span>)</span><br><span class="line">                <span class="comment"># 异常处理</span></span><br></pre></td></tr></table></figure>
<h4 id="函数运行"><a href="#函数运行" class="headerlink" title="- - -函数运行- - -"></a>- - -函数运行- - -</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(0, 100, 20):</span><br><span class="line">        json = get_page(page)</span><br><span class="line">        get_img_url(json)</span><br></pre></td></tr></table></figure>

<h4 id="以下为部分运行结果"><a href="#以下为部分运行结果" class="headerlink" title="以下为部分运行结果"></a>以下为部分运行结果</h4><p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E7%BB%93%E6%9E%9C2.png" alt="结果1"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/wtnyzhsq/cdnstatic/img/%E7%BB%93%E6%9E%9C2.png" alt="结果2"> </p>
<hr>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
